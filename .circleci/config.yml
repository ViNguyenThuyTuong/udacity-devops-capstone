version: 2.1

orbs:
  docker: circleci/docker@2.1.2
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

commands:
  install-awscli-gettext:
    description: Install awscli and gettext-base
    steps:
      - run:
          name: Install awscli and gettext-base
          command: |
            sudo apt update
            sudo apt-get install awscli
            sudo apt-get install gettext-base

  install-kubectl:
    description: Install kubectl
    steps:
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
  
  install-aws-iam-authenticator:
    description: Install aws-iam-authenticator
    steps:
      - run:
          name: Install aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator curl -o aws-iam-authenticator \
              https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator

jobs:
  setup-install-lint:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - install-aws-iam-authenticator
      - install-kubectl
      # Download and cache dependencies
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "app/requirements.txt" }}
      #       # fallback to using the latest cache if no exact match is found
      #       - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            chmod -R +x ./bin/
            python3 -m venv .devops-capstone
            source .devops-capstone/bin/activate
            make install
            #export AWS_EC2_METADATA_DISABLED=true
            make eks-create-cluster
      - save_cache:
          paths:
            - ./.devops-capstone
          key: v1-dependencies-{{ checksum "app/requirements.txt" }}
      - run:
          name: Make lint
          command: |
            source .devops-capstone/bin/activate
            make lint

  build-and-push-docker-image:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build and push docker image
          command: |
            export VERSION=$(<app/version.txt)
            
            # Build image
            docker build --tag udacity-capstone-project app
            
            # Set image tag
            docker tag udacity-capstone-project ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker tag udacity-capstone-project ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest
            
            # Login to docker-hub
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            
            # Publish
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            docker push ${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:lastest

  deploy-green:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - install-awscli-gettext
      - install-aws-iam-authenticator
      - install-kubectl
      - setup_remote_docker:
          docker_layer_caching: false

      - run:
          name: Deploy to EKS
          command: |
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
              chmod +x ./kubectl
              pip3 install awscli --upgrade
              aws --version
              #aws ecr get-login-password --region us-west-2
              echo "update-kubeconfig start"
              aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name ks
              echo "update-kubeconfig complete"
          # command: |
          #   echo $AWS_DEFAULT_REGION
          #   aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy new version as green
          command: |
            export VERSION=$(<app/version.txt)
            export DOCKER_IMAGE=${DOCKER_HUB_ID}/${DOCKER_REPOSITORY}:${VERSION}
            export LABEL_VERSION=${VERSION/./-}
            
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            echo "LABEL_VERSION: $LABEL_VERSION"
            echo "DOCKER_HUB_ID: $DOCKER_HUB_ID"
            echo "DOCKER_REPOSITORY: $DOCKER_REPOSITORY"
            
            envsubst < kubenetes/deployment.yaml | kubectl apply --filename -
            
            # service-green.yaml creates the udacity-capstone-project-green service
            envsubst < kubenetes/service-green.yaml | kubectl apply --filename -

            # sleep 3
            # LOAD_BALANCER=$(kubectl get services \
            #   udacity-capstone-project-green \
            #   --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            # echo "LOAD_BALANCER: $LOAD_BALANCER"

  smock-test:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - run:
          name: Smock test
          command: | 
            echo "Smock testing"
            echo "Smock test completed"

  deploy-new-blue:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - install-awscli-gettext
      - install-aws-iam-authenticator
      - install-kubectl
      - run:
          name: Connect to cluster
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name ks
      - run:
          name: Target new version â€” new blue
          command: |
            export VERSION=$(<app/version.txt)
            export LABEL_VERSION=${VERSION/./-}
            echo "LABEL_VERSION: $LABEL_VERSION"
            # udacity-capstone-project service target now labeled new version
            envsubst < kubenetes/service.yaml | kubectl apply --filename -

  clean-old-blue:
    docker:
      - image: cimg/python:3.7.13
    steps:
      - checkout
      - install-awscli-gettext
      - install-aws-iam-authenticator
      - install-kubectl
      - run:
          name: Connect to cluster
          command: |
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name ks
      - run:
          name: Remove the old version udacity-capstone-project
          command: |
            export VERSION=$(<app/version.txt)
            export LABEL_VERSION=${VERSION/./-}
            echo "LABEL_VERSION: $LABEL_VERSION"
            
            # Remove the udacity-capstone-project-x-x deployment
            for deploy in $(kubectl get deployments -o jsonpath="{.items[*].metadata.name}" | grep udacity-capstone-project);
            do
              if [[ $deploy != udacity-capstone-project-$LABEL_VERSION ]];
              then
                kubectl delete deployments $deploy
              fi
            done
            
            # Remove the udacity-capstone-project-green service
            if kubectl get services | grep udacity-capstone-project-green;
            then
              kubectl delete services udacity-capstone-project-green
            fi

workflows:
  default:
    jobs:
      - setup-install-lint
      - build-and-push-docker-image:
          requires: [setup-install-lint]
      - deploy-green:
          requires: [build-and-push-docker-image]
      - smock-test:
          requires: [deploy-green]
      - deploy-new-blue:
          requires: [smock-test]
      - clean-old-blue:
          requires: [deploy-new-blue]